//
// Created by yongxi on 2021/7/6.
//

#ifndef MOVEIT_NO_ROS_TRAJECTORY_H
#define MOVEIT_NO_ROS_TRAJECTORY_H

#include <trajectory_interface/quintic_spline_segment.h>
#include <moveit/robot_trajectory/robot_trajectory.h>
#include <joint_trajectory_controller/joint_trajectory_segment.h>
#include <trajectory_interface/pos_vel_acc_state.h>

/**
 * Trajectory representation using trajectory_interface::QuinticSplineSegment.
 */
class SplineTrajectory {
public:
    typedef joint_trajectory_controller::JointTrajectorySegment<trajectory_interface::QuinticSplineSegment<double>> Segment;
    typedef std::vector<Segment> TrajectoryPerJoint;
    typedef std::vector<TrajectoryPerJoint> Trajectory;

    /// Time stamps parameterization type
    enum class Parameterization{
        SPLINE, ///< IterativeSplineParameterization
        TIME,   ///< IterativeParabolicTimeParameterization
    };
    SplineTrajectory(robot_trajectory::RobotTrajectoryPtr robot_trajectory,
                     bool computeTimeStamps = true,
                     Parameterization param = Parameterization::SPLINE);
    /**
     * Sample positions, velocity and acceleration.
     * @param joint_name
     * @param sample Sample result would be pushed backed into sample.
     * @param interval The time interval between samples.
     * @return The number of data points sampled.
     */
    int sample(const std::string& joint_name, trajectory_interface::PosVelAccState<double>& sample, double interval = 1e-3);

    /**
     * The intex of specific joint.
     * @details This is also the order of sample result.
     * @param joint_name
     * @return return -1 if not exists.
     */
    int jointIndex(const std::string& joint_name);

    /**
     * Total time duration of trajectory.
     * @details It is computed by 'last_waypoint.endtime - first_waypoint.starttime'
     * @return Time duration. Return 0 if the trajectory is empty.
     */
    double duration();

    /**
     * Start time of trajectory.
     * @details It should be 0 as we only use relative time.
     * @return
     */
    double startTime();
    double endTime();

    /**
     * Compute the time stamps together with velocity and acceleration for specific RobotTrajectory.
     * @details RobotTrajectory has no time info when generated by motion planner. Moveit propose post-processing
     * method to compute the time info for RobotTrajectory.
     * @param trajectory
     * @param param
     */
    static void computeTimeStamps(robot_trajectory::RobotTrajectoryPtr trajectory, Parameterization param = Parameterization::SPLINE);
private:

    std::vector<std::string> joint_names_;
    std::string group_name_;
    moveit_msgs::RobotTrajectory robot_trajectory_msg_;
    Trajectory trajectory_;
};

#endif //MOVEIT_NO_ROS_TRAJECTORY_H
